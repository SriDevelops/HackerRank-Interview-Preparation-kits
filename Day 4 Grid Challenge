import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'gridChallenge' function below.
     *
     * The function is expected to return a STRING.
     * The function accepts STRING_ARRAY grid as parameter.
     */
public static boolean checkAlphabetic(String input) {
    
// this func() loops over each char of string and determines the "input" string is in ascending order or not
    int q=0;
    for (int i = 0; i < input.length()-1&& q<input.length(); i++) {
         q=i;
        if (input.charAt(i)>input.charAt(q+1) ) {
            return false;
        }
    }
    return true;
}
    public static String gridChallenge(List<String> grid) {
    // Write your code here
    
    int len=grid.get(0).length();
    List<String> matrixGrid = new ArrayList<>();
    String[] ColString = new String[len];
    

    for (String s : grid) {
        //row wise alphabetically order check
         char[] chars = s.toCharArray();
            Arrays.sort(chars);
            String sorted = new String(chars);     
            matrixGrid.add(sorted);
    }    
// Below While loop is used to group the chars of column wise 
// for loop used to group chars of each column into one string i.e "val" variable
// copying "val" variable to String array here it is "ColString"
// read line by line of below while loop 
int count =0;
while( count !=len){
    String val = "";  
    for(int i=0;i<matrixGrid.size();i++){
         val = val + matrixGrid.get(i).charAt(count);
    }
    ColString[count]=val;
    count++;
}

//Iterating over "Colstring" string array
//call the checkAlphabetic() passing each string of array 
// if  return is true then set "temp" to 1 else set "temp" to 0

int temp=-1;
for (String string : ColString) {
    if(checkAlphabetic(string)){
        System.out.println(" in if condition of alpha check "+ string + " TRUE");
         temp=1;
        continue; 
       
    }
    else {temp=0; 
    System.out.println(" In else condition of alpha check "+ string + "false"); break;}
}

// After completing all iterations 
//check the "temp" variable and return the appropriate value
if(temp==0){ return "NO";} else return "YES";
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int t = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, t).forEach(tItr -> {
            try {
                int n = Integer.parseInt(bufferedReader.readLine().trim());

                List<String> grid = IntStream.range(0, n).mapToObj(i -> {
                    try {
                        return bufferedReader.readLine();
                    } catch (IOException ex) {
                        throw new RuntimeException(ex);
                    }
                })
                    .collect(toList());

                String result = Result.gridChallenge(grid);

                bufferedWriter.write(result);
                bufferedWriter.newLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
        bufferedWriter.close();
    }
}
